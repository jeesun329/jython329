{
  
    
        "post0": {
            "title": "Title",
            "content": ". 함수: 특정 기능을 구현하기 위해 관련된 여러개의 실행문을 묶어놓은 코드, 반복되는 부분을 함수화 하여 코드의 중복을 배제한다., 코드의 가독성을 높여 프로그램의 흐름 파악 및 디버깅 용이 . -내장함수: 파이썬 프로그램에 기본적으로 내장된 함수, import . dir(__builtins__) . [&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, &#39;BaseException&#39;, &#39;BlockingIOError&#39;, &#39;BrokenPipeError&#39;, &#39;BufferError&#39;, &#39;BytesWarning&#39;, &#39;ChildProcessError&#39;, &#39;ConnectionAbortedError&#39;, &#39;ConnectionError&#39;, &#39;ConnectionRefusedError&#39;, &#39;ConnectionResetError&#39;, &#39;DeprecationWarning&#39;, &#39;EOFError&#39;, &#39;Ellipsis&#39;, &#39;EnvironmentError&#39;, &#39;Exception&#39;, &#39;False&#39;, &#39;FileExistsError&#39;, &#39;FileNotFoundError&#39;, &#39;FloatingPointError&#39;, &#39;FutureWarning&#39;, &#39;GeneratorExit&#39;, &#39;IOError&#39;, &#39;ImportError&#39;, &#39;ImportWarning&#39;, &#39;IndentationError&#39;, &#39;IndexError&#39;, &#39;InterruptedError&#39;, &#39;IsADirectoryError&#39;, &#39;KeyError&#39;, &#39;KeyboardInterrupt&#39;, &#39;LookupError&#39;, &#39;MemoryError&#39;, &#39;ModuleNotFoundError&#39;, &#39;NameError&#39;, &#39;None&#39;, &#39;NotADirectoryError&#39;, &#39;NotImplemented&#39;, &#39;NotImplementedError&#39;, &#39;OSError&#39;, &#39;OverflowError&#39;, &#39;PendingDeprecationWarning&#39;, &#39;PermissionError&#39;, &#39;ProcessLookupError&#39;, &#39;RecursionError&#39;, &#39;ReferenceError&#39;, &#39;ResourceWarning&#39;, &#39;RuntimeError&#39;, &#39;RuntimeWarning&#39;, &#39;StopAsyncIteration&#39;, &#39;StopIteration&#39;, &#39;SyntaxError&#39;, &#39;SyntaxWarning&#39;, &#39;SystemError&#39;, &#39;SystemExit&#39;, &#39;TabError&#39;, &#39;TimeoutError&#39;, &#39;True&#39;, &#39;TypeError&#39;, &#39;UnboundLocalError&#39;, &#39;UnicodeDecodeError&#39;, &#39;UnicodeEncodeError&#39;, &#39;UnicodeError&#39;, &#39;UnicodeTranslateError&#39;, &#39;UnicodeWarning&#39;, &#39;UserWarning&#39;, &#39;ValueError&#39;, &#39;Warning&#39;, &#39;ZeroDivisionError&#39;, &#39;__IPYTHON__&#39;, &#39;__build_class__&#39;, &#39;__debug__&#39;, &#39;__doc__&#39;, &#39;__import__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;abs&#39;, &#39;all&#39;, &#39;any&#39;, &#39;ascii&#39;, &#39;bin&#39;, &#39;bool&#39;, &#39;breakpoint&#39;, &#39;bytearray&#39;, &#39;bytes&#39;, &#39;callable&#39;, &#39;chr&#39;, &#39;classmethod&#39;, &#39;compile&#39;, &#39;complex&#39;, &#39;copyright&#39;, &#39;credits&#39;, &#39;delattr&#39;, &#39;dict&#39;, &#39;dir&#39;, &#39;display&#39;, &#39;divmod&#39;, &#39;dreload&#39;, &#39;enumerate&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;execfile&#39;, &#39;filter&#39;, &#39;float&#39;, &#39;format&#39;, &#39;frozenset&#39;, &#39;get_ipython&#39;, &#39;getattr&#39;, &#39;globals&#39;, &#39;hasattr&#39;, &#39;hash&#39;, &#39;help&#39;, &#39;hex&#39;, &#39;id&#39;, &#39;input&#39;, &#39;int&#39;, &#39;isinstance&#39;, &#39;issubclass&#39;, &#39;iter&#39;, &#39;len&#39;, &#39;license&#39;, &#39;list&#39;, &#39;locals&#39;, &#39;map&#39;, &#39;max&#39;, &#39;memoryview&#39;, &#39;min&#39;, &#39;next&#39;, &#39;object&#39;, &#39;oct&#39;, &#39;open&#39;, &#39;ord&#39;, &#39;pow&#39;, &#39;print&#39;, &#39;property&#39;, &#39;range&#39;, &#39;repr&#39;, &#39;reversed&#39;, &#39;round&#39;, &#39;runfile&#39;, &#39;set&#39;, &#39;setattr&#39;, &#39;slice&#39;, &#39;sorted&#39;, &#39;staticmethod&#39;, &#39;str&#39;, &#39;sum&#39;, &#39;super&#39;, &#39;tuple&#39;, &#39;type&#39;, &#39;vars&#39;, &#39;zip&#39;] . #import 하여 사용함. 모듈 뒤에 점을 찍어 사용 #from 패키지명 inport모듈명 : 원하는 모듈만 특정해서 불러오기 #from 모듈명 import함수명 . import calendar # calendar 모듈 import print(calendar.month(2021,5)) # 달력 년월을 지정 출력 . May 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 . from calendar import month # calendar 모듈 import print(month(2021,5)) # 달력 년월을 지정 출력 . May 2021 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 . import datetime date1 = datetime.date.today() date2 = datetime.date(2000,3,29) print(date1-date2) . 7735 days, 0:00:00 . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) print(a,b,c,d,e,f) . 0.6953767959909682 2.0617826217653645 5 28 j 보 . import random a = random.random() b = random.uniform(1,10) c = random.randint(1,10) d = random.randrange(0,101,2) e= random.choice(&#39;abcdefghij&#39;) f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) a=[&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;] random.shuffle(a) print(a) print(a,b,c,d,e,f) . [&#39;보&#39;, &#39;가위&#39;, &#39;바위&#39;] [&#39;보&#39;, &#39;가위&#39;, &#39;바위&#39;] 4.595637674773512 9 18 h 바위 . def sum1(a,b):#함수명, 매개변수 c = a+b return c#리턴값 sum1(4,5) . 9 . def say_hello(): print(&#39;안녕하세요!!&#39;) print(&#39;나는윤지선입니다!!!!!&#39;) print(&#39;브라우니 먹고싶다악!!!&#39;) for i in range(3): say_hello() . 안녕하세요!! 나는윤지선입니다!!!!! 브라우니 먹고싶다악!!! 안녕하세요!! 나는윤지선입니다!!!!! 브라우니 먹고싶다악!!! 안녕하세요!! 나는윤지선입니다!!!!! 브라우니 먹고싶다악!!! . def say_hello(name1,name2): print(f&#39;&#39;&#39;야 {name1},{name2}야, 방이너무 더럽다. 바닥좀 닦아라&#39;&#39;&#39;) say_hello(&#39;까미&#39;,&#39;지선이&#39;) . 야 까미,지선이야, 방이너무 더럽다. 바닥좀 닦아라 . def circle_area(radius): area = 3.14 * radius **2 return area radius = float(input(&#39;반지름: &#39;))#전역변수 print(circle_area(radius)) . 반지름: 5 78.5 . def get_plus(num1, num2): result = num1 * num2 return result get_plus(3,2) . 6 . def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus get_plus_minus(1,2) . (3, 2) . def get_plus_minus_x(num1,num2,num3): plus = num1 + num2 minus = num1 - num2 #지역변수 x = num1 * num3 return plus,minus, x #if a != 0 : 나눗셈일때 정의 get_plus_minus_x(1,2,0) . aaa . (3, -1, 0) . def get_div(num1,num2): result = 0 if num2 == 0: print(&#39;다른수를 입력하세요&#39;) else: result = num1/num2 return result get_div(2,0) . 다른수를 입력하세요 . 0 . #함수 내에서 만든 변수는 함수밖에서 사용할 수 없다. 전역변수는 함수 내에서 사용이 가능하다. . def circle_area(): area = 3.14 * radius ** 2 return area #반환값 소멸됨 그래서 밑에 0 됨 area = 0 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) ﻿ #변경안됨, 함수에서 area계산되었지만 전역변수 값은 변경되지 않음, 함수에서 전역변수를 직접 사용한게 아니라 동일한 이름과 값을 가진 지역변수를 새롭게 만들어 사용하기 때문이다.새롭 . 반지름:3 원의 넓이: 28.26 0 . def circle_area(): global area#예약어라 밖에서도 사용한다는 뜻 area = 3.14 * radius ** 2 return area area = 0#초기값 준거임 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경, global 키워드를 사용하면 전역변수를 직접 사용하게 된다. . 반지름:3 원의 넓이: 28.26 28.26 . def greet(name, msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;,&#39;좋은 아침이야&#39;) . 안녕 철수,좋은 아침이야 . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;) . TypeError Traceback (most recent call last) &lt;ipython-input-55-f03df1934f4c&gt; in &lt;module&gt;() 2 def greet(name,msg): 3 print(f&#39;안녕 {name},{msg}&#39;) -&gt; 4 greet(&#39;철수&#39;) TypeError: greet() missing 1 required positional argument: &#39;msg&#39; . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;,&#39;오랜만이야&#39;) . 안녕 영희,오랜만이야 . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;) . 안녕 영희,잘 지내니? . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet() . 안녕 친구,잘 지내니? . def greet(name = &#39;친구&#39;,msg = &#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;잘지내니&#39;) #처음 인수는 생략할 수 없음, msg만 넣는 거 안됨. . 안녕 잘지내니,잘 지내니? . def calc(x,y,z): result = x,y,z return result calc(1,z=5,y=3)#위치 인수를 먼저 사용 . (1, 3, 5) . def calc(x,y,z): result = x,y,z return result calc(x=1,3,5)#키워드 인수를 먼저 사용하면 에러 . File &#34;&lt;ipython-input-62-0dd1011b4cd9&gt;&#34;, line 4 calc(x=1,3,5) ^ SyntaxError: positional argument follows keyword argument . def calc(x,y,z): result = x,y,z return result calc(x=1,5,y=3)#위치변수 두번째 들어가도 에러 but . File &#34;&lt;ipython-input-66-497b3d23caef&gt;&#34;, line 4 calc(x=1,5,y=3)#위치변수 두번째들어가도 에러 ^ SyntaxError: positional argument follows keyword argument . def calc(x,y,z): result = x,y,z return result calc(x=1,z=5,y=3) . (1, 3, 5) . def calc(x,y,z): result = x,y,z return result calc(x=1,z=5,3) . File &#34;&lt;ipython-input-68-5931ce5d942e&gt;&#34;, line 4 calc(x=1,z=5,3) ^ SyntaxError: positional argument follows keyword argument . def average(*args):#args는 튜플 데이터 형이다. print(args) avrg = sum(args) / len(args) return avrg print(int(average(1,2,3))) print(average(1,2,3,4,5)) . (1, 2, 3) 2 (1, 2, 3, 4, 5) 3.0 . def average(*a):#args는 튜플 데이터 형이다. avrg = sum(a) / len(a) return avrg print(int(average(1,2,3))) print(average(1,2,3,4,5)) . 2 3.0 . def average(*a):#args는 튜플 데이터 형이다. avrg = max(a) return avrg print(int(average(1,2,3))) print(average(1,2,3,4,5)) . 3 5 . def average(*a): avrg = min(a)+max(a) return avrg print(int(average(1,2,3))) print(average(1,2,3,4,5)) . 4 6 . #소수는 1과 자기자신만으로 나누어ㄸ러어지는 1보다 큰 양의 정수를 의미한다. #키보드로 입력된 수가 소수인지 아닌지 판별하는 함수를 작성하시옹 def is_prime(number): #소수여부 판단하여 리턴 #소수:True, 소수가 아님:False if number &lt; 2: return False for i in range(2,number): if number% i == 0: return False return True input_number = int(input(&#39;숫자:&#39;)) if is_prime(input_number): print(&#39;소수입니다.&#39;) else: print(&#39;소수가 아닙니다.&#39;) . 숫자:5 소수입니다. . def is_prime(number): #소수여부 판단하여 리턴 #소수:True, 소수가 아님:False if number &lt; 2: return False for i in range(2,number): if number% i == 0: return False return True input_number = int(input(&#39;숫자:&#39;)) if is_prime(input_number): print(&#39;소수입니다.&#39;) else: print(&#39;소수가 아닙니다.&#39;) . 숫자:51 소수가 아닙니다. . . def a(number): if number % 2 == 0: return True else: return False num=int(input(&#39;숫자:&#39;)) if a(num): print(&#39;짝수입니다.&#39;) else: print(&#39;홀수입니다.&#39;) . 숫자:3 홀수입니다. . def a(number): if number % 2 == 0: True else: False num=int(input(&#39;숫자:&#39;)) if a(num): print(&#39;짝수입니다.&#39;) else: print(&#39;홀수입니다.&#39;) print(a(num)) . 숫자:4 홀수입니다. None . %matplotlib inline import matplotlib as mpl import matplotlib.pyplot as plt import matplotlib.font_manager as fm mpl.rcParams[&#39;axes.unicode_minus&#39;] = False . import numpy as np data = np.random.randint(-100, 100, 50).cumsum() data . array([ 61, 151, 139, 167, 147, 196, 201, 121, 86, 8, 90, 0, 97, 87, 78, 89, -8, 72, 99, 129, 162, 72, 154, 117, 60, 51, 54, 133, 166, 102, 37, 41, 92, 34, 61, 126, 91, 158, 139, 215, 140, 126, 27, -4, -38, -81, -121, -37, -112, -17]) . plt.plot(range(50), data, &#39;r&#39;) mpl.rcParams[&#39;axes.unicode_minus&#39;] = False plt.title(&#39;타이틀&#39;) plt.ylabel(&#39;와이값&#39;) plt.xlabel(&#39;엑스값&#39;) . Text(0.5, 0, &#39;엑스값&#39;) . /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 53440 missing from current font. font.set_text(s, 0.0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51060 missing from current font. font.set_text(s, 0.0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 53952 missing from current font. font.set_text(s, 0.0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50641 missing from current font. font.set_text(s, 0.0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 49828 missing from current font. font.set_text(s, 0.0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44050 missing from current font. font.set_text(s, 0.0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50641 missing from current font. font.set_text(s, 0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 49828 missing from current font. font.set_text(s, 0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44050 missing from current font. font.set_text(s, 0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50752 missing from current font. font.set_text(s, 0.0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50752 missing from current font. font.set_text(s, 0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51060 missing from current font. font.set_text(s, 0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 53440 missing from current font. font.set_text(s, 0, flags=flags) /usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 53952 missing from current font. font.set_text(s, 0, flags=flags) . def today_menu(*menu): for i in menu: print(i) print(&quot;==오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;오뎅&#39;) . ==오늘의 메뉴 == 김밥 떡볶이 오뎅 . def today_menu(*menu): for i in range(len(menu)): print(menu[i]) print(&quot;==오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;오뎅&#39;) . ==오늘의 메뉴 == 김밥 떡볶이 오뎅 . def plus(num1,num2): result = num1 + num2 return result print(plus(10,20)) plus = lambda num1,num2: num1 + num2 print(plus(10,20)) . 30 30 . plus = lambda num1,num2: num1+num2 print(plus(10,20)) . 30 . mylist = [1,2,3,4,5] mylist = set(map(lambda num: num +10,mylist)) print(mylist) . {11, 12, 13, 14, 15} . #재귀호출은 인반적인 상황에서는 잘 사용하지 않지만 알고리즘을 구현할때 매우 유용하다. def hello(count): if count == 0: return print(&#39;hello, world&#39;, count) count -= 1 hello(count) hello(5) . hello, world 5 hello, world 4 hello, world 3 hello, world 2 hello, world 1 . def factorial(n): if n == 1:#n이 1일때 return 1#1을 반환하고 재귀호출을 끝냄 return n * factorial(n - 1) #n과 팩토리얼 함수에 n-1을 넣어서 반환된 값을 곱함 print(factorial(5)) . 120 . dict_scores = { &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(dict_scores.get(&#39;지선&#39;,&#39;없음&#39;)) . 없음 . 프로그램에는 세개 메뉴가 있으며 기능은 3개 각메뉸 함수로 작성, 초기재고 삼각김밥 10개 커피우유 10개 -재고등록: #엔터 입력할때까지 반복하여 사용자로부터 개수 이름 입력받기 #만약 물건이름 없으면 추가하고 존재하면 개수 더하기 #입력끝나면 모든 재고현황 보여주기~ 초기재고:삼김10,커피유유10개 # . File &#34;&lt;ipython-input-106-999b7da48d2e&gt;&#34;, line 2 프로그램에는 세개 메뉴가 있으며 기능은 3개 ^ SyntaxError: invalid syntax . inven ={ &#39;삼각김밥&#39; : 10, &#39;커피우유&#39; : 20} while True: print(&#39;&#39;&#39; =====재고관리 시스템 ===== 1:재고등록, 2: 제품판매, 3:재고확인, 0:프로그램종료 &#39;&#39;&#39;) menu = input(&#39;메뉴를 선택하세요:&#39;) if menu == &#39;0&#39;: print(&#39;프로그램을 종료합니다.&#39;) break elif menu == &#39;1&#39;: print(&#39;재고를 등록합니다&#39;) while True: a = input(&#39;상품명:&#39;) if a == &#39;&#39;: break elif a in inven.keys(): b = int(input(&#39;개수:&#39;)) inven[a]+=b else: b = int(input(&#39;개수:&#39;)) inven[a]= b . =====재고관리 시스템 ===== 1:재고등록, 2: 제품판매, 3:재고확인, 0:프로그램종료 메뉴를 선택하세요:1 재고를 등록합니다 상품명:삼각김밥 개수:3 상품명:삼각김밥 개수:3 상품명: =====재고관리 시스템 ===== 1:재고등록, 2: 제품판매, 3:재고확인, 0:프로그램종료 메뉴를 선택하세요:2 =====재고관리 시스템 ===== 1:재고등록, 2: 제품판매, 3:재고확인, 0:프로그램종료 메뉴를 선택하세요:1 재고를 등록합니다 상품명: =====재고관리 시스템 ===== 1:재고등록, 2: 제품판매, 3:재고확인, 0:프로그램종료 . KeyboardInterrupt Traceback (most recent call last) /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in _input_request(self, prompt, ident, parent, password) 728 try: --&gt; 729 ident, reply = self.session.recv(self.stdin_socket, 0) 730 except Exception: /usr/local/lib/python3.7/dist-packages/jupyter_client/session.py in recv(self, socket, mode, content, copy) 802 try: --&gt; 803 msg_list = socket.recv_multipart(mode, copy=copy) 804 except zmq.ZMQError as e: /usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py in recv_multipart(self, flags, copy, track) 582 &#34;&#34;&#34; --&gt; 583 parts = [self.recv(flags, copy=copy, track=track)] 584 # have first part already, only loop while more to receive zmq/backend/cython/socket.pyx in zmq.backend.cython.socket.Socket.recv() zmq/backend/cython/socket.pyx in zmq.backend.cython.socket.Socket.recv() zmq/backend/cython/socket.pyx in zmq.backend.cython.socket._recv_copy() /usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: During handling of the above exception, another exception occurred: KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-111-58af2bf8ab6b&gt; in &lt;module&gt;() 7 1:재고등록, 2: 제품판매, 3:재고확인, 0:프로그램종료 8 &#39;&#39;&#39;) -&gt; 9 menu = input(&#39;메뉴를 선택하세요:&#39;) 10 if menu == &#39;0&#39;: 11 print(&#39;프로그램을 종료합니다.&#39;) /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in raw_input(self, prompt) 702 self._parent_ident, 703 self._parent_header, --&gt; 704 password=False, 705 ) 706 /usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py in _input_request(self, prompt, ident, parent, password) 732 except KeyboardInterrupt: 733 # re-raise KeyboardInterrupt, to truncate traceback --&gt; 734 raise KeyboardInterrupt 735 else: 736 break KeyboardInterrupt: . inven ={ &#39;삼각김밥&#39; : 10, &#39;커피우유&#39; : 20} while True: print(&#39;&#39;&#39; =====재고관리 시스템 ===== 1:재고등록, 2: 제품판매, 3:재고확인, 0:프로그램종료 &#39;&#39;&#39;) menu = input(&#39;메뉴를 선택하세요:&#39;) if menu == &#39;0&#39;: print(&#39;프로그램을 종료합니다.&#39;) break elif menu == &#39;1&#39;: print(&#39;재고를 등록합니다&#39;) while True: a = input(&#39;상품명:&#39;) if a == &#39;&#39;: break elif a in inven.keys(): b = int(input(&#39;개수:&#39;)) inven[a]+=b else: b = int(input(&#39;개수:&#39;)) inven[a]= b elif menu == &#39;2&#39;: while True: c = input(&#39;재고명 : &#39;) if c == &#39;&#39;: break else: d = int(input(&#39;갯수 : &#39;)) if c not in inven.keys(): print(&#39;재고가 없습니다.&#39;) elif d &gt; inven[c]: print(&#39;재고가 부족합니다&#39;) else: inven[c] -= d . v&gt; .",
            "url": "https://jeesun329.github.io/jython329/2021/06/06/_3%ED%8C%80_%EC%9C%A4%EC%A7%80%EC%84%A0_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.html",
            "relUrl": "/2021/06/06/_3%ED%8C%80_%EC%9C%A4%EC%A7%80%EC%84%A0_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jeesun329.github.io/jython329/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jeesun329.github.io/jython329/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jeesun329.github.io/jython329/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}